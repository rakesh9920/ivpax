# mlfmm / angle_error_analysis.py

import numpy as np
import scipy as sp
from mlfmm.fasttransforms import *
from matplotlib import pyplot as pp

# set parameters
D0 = 0.001
level = 2
f = 5e6
rho = 1000
c = 1540
k = 2*np.pi*f/c
nsource = 1
nfieldpos = 1
C = 3/1.6
freqs = np.arange(50e3, 20e6, 50e3)
####
    
# define geometry
box = np.array([[-0.5, 0.5],[-0.5, 0.5],[0, 0]])*D0/(2**level)
Dx = box[0,1] - box[0,0]
Dy = box[1,1] - box[1,0]
Dz = box[2,1] - box[2,0]
obs_d = 2*Dx
center1 = np.array([-Dx/4, Dy/4, 0])
center2 = np.array([0, 0, 0])
center3 = np.array([0, obs_d, 0])
center4 = np.array([-Dx/4, -Dy/4, 0]) + center3
max_error = [30.116279501800154, 30.02668030808195, 29.877329260124146, 29.668197465431938, 29.399243905654991, 29.070414961880775, 24.239417007724988, 23.834764900605109, 23.376004246363024, 22.863067240273484, 22.295872393165332, 21.674322685384809, 20.998303692872771, 10.938000323209938, 10.448077918432942, 9.9247794368040712, 9.368167494262341, 8.7783016964609093, 8.1552370455948378, 7.4990221925019753, 6.8096975374884972, 6.0872931887404773, 0.63425671218416391, 0.51576471941883073, 0.3900738553414127, 0.25691561594260393, 0.11600910126931691, 0.032939706884948232, 0.19023708229414552, 0.35620710583118459, 1.9026943439082973, 2.3562227576856891, 2.8053258925473927, 3.2487243019427452, 3.6851497506509179, 4.1133462882698337, 4.5320710958990995, 4.9400951066927812, 5.3362034007778476, 9.653768029353941, 10.27694094515668, 10.879852412032335, 11.461070842556669, 12.019201138067636, 12.552880932843719, 13.060792763688479, 13.54164483390517, 13.994182438902977, 13.752750981350545, 14.126204219292452, 14.468818517627668, 14.779490574894785, 15.057145818126633, 15.300737571906712, 15.509246220210843, 15.681678368985747, 15.817066017856659, 10.311232969277176, 10.337574571652143, 10.335815365319419, 10.30541380170407, 10.245494468300086, 10.155547620978819, 10.034963509828184, 9.8831474193544633, 9.6995189248304836, 2.9840380725194491, 2.9013481371782275, 2.8065697738236826, 2.6994338877873223, 2.5796744897632564, 2.4470283657156147, 2.3012347085299139, 2.1420347106013238, 1.9691711167687445, 1.0639506235940881, 0.90560224379331844, 0.74318856571461778, 0.57726146926320299, 0.40839099240010868, 0.23717327335547755, 0.064223341016161423, 0.10982416024421225, 0.28431587577583384, 0.45858061765999059, 1.7936454950402474, 2.2503973993154349, 2.708928747807219, 3.1680338146615759, 3.6264995511656828, 4.0831078073857778, 4.5366374158551439, 4.9858661365420867, 5.4295724635658873, 5.8665372952269523, 6.934261563847306, 7.3963560464955753, 7.8476843795100741, 8.2868156833698396, 8.7124972441547985, 9.1234890635682486, 9.5185647688427863, 9.8965124268428717, 10.256135270638316, 10.596252346896536, 8.0695004863742046, 8.2862554610632699, 8.4848545182479924, 8.6643775062861117, 8.8239161742074064, 8.9625744451660712, 9.07946864016359, 9.1737276562811196, 9.2444931037982876, 4.1875341672076907, 4.1943024425793975, 4.1882297057579718, 4.1688620832162115, 4.1357512658520292, 4.0884546010009428, 4.02653515597087, 3.949561753814955, 3.8571089821856628, 3.7487571762649274, 0.27773215834169512, 0.24977239085726138, 0.2216127486439356, 0.19348906464574156, 0.16565068033617375, 0.13836042413802621, 0.11189458029748264, 0.086542849933954807, 0.062608306032555489, 0.04039881793016252, 0.6050564956612362, 0.34983243359465882, 0.087620607428096506, 0.18093591741291931, 0.45516669728525522, 0.73437534573877528, 1.0178409894113691, 1.3048197351321515, 1.5945461393969476, 1.8862346718863328, 2.9213961201830561, 3.3122689759561208, 3.7035952317222711, 4.0943565934962791, 4.4835233633328162, 4.8700562381016343, 5.2529080402654715, 5.6310262938590361, 6.0033512193942533, 6.3688225396664713, 6.7263774650746564, 5.9156004028395204, 6.1972220176339148, 6.4689755293155144, 6.7299203782070771, 6.9791176075360548, 7.215630765882775, 7.4385267567863522, 7.6468766376838531, 7.8397563706557438, 8.0162475277110019, 4.5409262782634885, 4.6154390067458246, 4.678324981094014, 4.7290027062093101, 4.7668936781212858, 4.791422757063061, 4.8019651725339081, 4.7980601635010958, 4.7790915035567751, 4.7445007459319077, 0.8798635285692602, 0.87391360968509868, 0.86420603417896347, 0.85051758802307598, 0.83262001066681035, 0.81027999726687516, 0.78325919669382915, 0.75131420487376666, 0.71419655305726559, 0.6716526906425726, 0.89348255974441659, 0.77074013688714416, 0.64256491815446948, 0.50925292624325125, 0.37112363504465812, 0.22851957552168459, 0.081806246536943503, 0.068628803528992102, 0.22237607382252098, 0.37900471443718375, 0.5380630618611757, 1.2642936439452104, 1.5574415344640447, 1.854834275327981, 2.1557630457935049, 2.4594974921874808, 2.7652871211575194, 3.0723626967894617, 3.379937635394064, 3.6872093922758071, 3.9933608353262962, 4.1005724634650171, 4.3878044692959177, 4.6714150781790975, 4.9505679319849909, 5.2244820576141517, 5.492181115024346, 5.7528677489140811, 6.0056789917448983, 6.2497479546105872, 6.4842048515517172, 6.7081779897913281, 4.4735942127343469, 4.5988083868441167, 4.7146325004221987, 4.8204256536216619, 4.9155460241458719, 4.9993514371989463, 5.0711999141623547, 5.130450200310408, 5.1764622720414248, 5.2085978242724371, 1.8237253444107797, 1.8250190277409306, 1.820226700886451, 1.8090498545063185, 1.7911885794762772, 1.7663410819038112, 1.7342039939525793, 1.6944725179052589, 1.6468405628509237, 1.5910008739191037, 1.5266451540440509, 0.44940978675373688, 0.40036297661137693, 0.34919399065750117, 0.29607602145324574, 0.24119695011140607, 0.18475939515124776, 0.12698073682532696, 0.068093117545084528, 0.0083434191407097402, 0.052006782218783902, 0.26421759755659036, 0.46584720533715757, 0.67284944567725469, 0.88478088342584094, 1.101181517531802, 1.3215686809317808, 1.5454377967786439, 1.772263171711997, 2.0014988215865279, 2.2325793251214172, 2.4649207010202905, 3.0166799238543782, 3.2785218068120936, 3.5400784942156567, 3.800656710415323, 4.0595490742607412, 4.3160351667838448, 4.5693825941533923, 4.8188480430147553, 5.0636783256698488, 5.3031114128991117, 4.0768159237272767, 4.2397997241330661, 4.3963664538229379, 4.5458756298966243, 4.6876814153845237, 4.8211333123315034, 4.9455768413479335, 5.0603542070880918, 5.1648049493001338, 5.2582665792852605, 5.3400752017642894, 2.5094032886121096, 2.531909798226061, 2.5472988284923987, 2.5551916724114148, 2.5552078753365741, 2.5469655249850667, 2.5300815352191965, 2.5041719234630611, 2.4688520816817165, 2.4237555345974786, 0.11899038625086777, 0.12743551099026923, 0.1350891046057642, 0.14180446875388694, 0.14742697660628806, 0.15179399773117902, 0.15473483086356685, 0.15607064448242511, 0.15561442509232123, 0.15317093309490445, 0.14853666611302321, 0.09807570919095078, 0.030077399510919957, 0.16266183262896231, 0.29941793870807681, 0.4400665069300892, 0.58430897329726683, 0.73182766758276618, 0.88228609920222389, 1.0353292800091543, 1.1905839618008185, 1.347659487447161, 2.0776831526179529, 2.3029322306151947, 2.5301438097332518, 2.758782083114816, 2.9882939387360583, 3.2181097727585422, 3.4476443211434802, 3.6762975062495031, 3.9034552953002386, 4.1284905677761818, 3.6388162765415366, 3.8192293212453676, 3.9957489999779057, 4.1677761254662933, 4.3347025973076958, 4.495912119138902, 4.6507809125094663, 4.7986784262039457, 4.9389366328105035, 5.0709754488859131, 5.1941177281509132, 2.9588602298179985, 3.0106969722287151, 3.0555716643749817, 3.0930482431135964, 3.1226875373954899, 3.1440476512752253, 3.1566843427678752, 3.1601513982801608, 3.154001002423406, 3.1377841030950377, 3.1110507717870965, 0.7568250278906804, 0.74822309773316265, 0.73630313001767045, 0.72087349404203616, 0.70173830715391816, 0.67869747256285418, 0.6515467185479592, 0.62007730221041024, 0.58407742064749235, 0.5433301677672816, 0.49761498851071739, 0.10949302978447797, 0.03719597779900765, 0.037636690450707166, 0.11483375523157408, 0.19420981074246887, 0.27556523835142244, 0.35868620594115325, 0.44334469296914131, 0.52929854074291294, 0.61629152731973336, 1.3025573433856348, 1.4837414617317737, 1.6680436961843192, 1.8550793140492152, 2.0444456997945286, 2.2357228433360388, 2.4284986728052318, 2.6222723833580885, 2.8165978099054101, 3.0109908265373448, 3.2049527681723147, 3.2683204644671373, 3.4518271851030526, 3.6332789365293467, 3.8121373734759234, 3.9878529957037925, 4.1598658134877935, 4.3276060193294459, 4.4904946642875201, 4.6479443374427731, 4.7993598471622869, 4.9441389029615808, 3.2674316264055938, 3.3438963368203387, 3.4139420666078819, 3.4771014246545739, 3.5329023754032773, 3.5808699088954441, 3.6205215733938272, 3.6513752363826617, 3.6729446566224047, 3.6847411245431263, 3.6862738904793053, 1.3676596647605932]

if __name__ == '__main__':
    
    sources = np.array([Dx, Dy, Dz])/2 + center1 
    sources = sources[None,:]
    strengths = np.ones(nsource)
    fieldpos = np.array([-Dx, -Dy, -Dz])/2 + center4
    fieldpos = fieldpos[None,:]
    
    min_angle1 = []
    min_angle2 = []
    #min_angle2 = [5, 5, 9, 11, 11, 14, 16, 16, 19, 18, 21, 21, 24, 23, 24, 24, 
        #25, 26, 29, 32, 31, 34, 34, 34, 34, 37, 37, 37, 37, 40, 42, 42, 42, 45, 
        #45, 44, 47, 47, 47, 47]
    sugg_angle1 = []
    sugg_angle2 = []
    error = []
    idx = 0
    
    for f in freqs:
        
        print f
        
        k = 2*np.pi*f/c
        
        pres_exact = directeval(strengths, sources, fieldpos, k, rho, c)
        
        v = np.sqrt(3)*Dx*k/2
        order1 = np.int(np.ceil(v + C*np.log(v + np.pi)))
        angle1 = order1
        
        v = np.sqrt(3)*Dx*k
        order2 = np.int(np.ceil(v + C*np.log(v + np.pi)))
        angle2 = order2
        #angle2 = min_angle2[idx]
        
        sugg_angle1.append(angle1)
        sugg_angle2.append(angle2)
        
        error_temp = 0
        while True:
            
            kdir, weights, w1, w2 = fftquadrule2(angle1)
            kcoord = dir2coord(kdir)
            kcoordT = np.transpose(kcoord, (0,2,1))
        
            newkdir, newweights, _, _ = fftquadrule2(angle2)
            newkcoord = dir2coord(newkdir)    
            newkcoordT = np.transpose(newkcoord, (0,2,1))
            
            coeff = ffcoeff(strengths, sources, center1, k, kcoord)
        
            r = center2 - center1
            rhat = r/mag(r)
            cos_angle = rhat.dot(newkcoordT)
            shifter1 = m2m(mag(r), cos_angle, k)
        
            r = center3 - center2
            rhat = r/mag(r)
            cos_angle = rhat.dot(newkcoordT)
            translator = m2l(mag(r), cos_angle, k, order2)
        
            r = center4 - center3
            rhat = r/mag(r)
            cos_angle = rhat.dot(newkcoordT)
            shifter2 = m2m(mag(r), cos_angle, k)
            
            newffcoeff = shifter1*fftinterpolate2(coeff, kdir, newkdir)
            newnfcoeff = newffcoeff*translator*shifter2
            
            nfcoeff = fftfilter2(newnfcoeff, newkdir, kdir)
        
            pres_fmm = nfeval(nfcoeff, fieldpos, center4, weights, k, kcoord, 
                rho, c)
    
            perr = np.abs(np.abs(pres_fmm) - np.abs(pres_exact))/np.abs(pres_exact)*100
            
            error_delta = np.abs(perr - error_temp)
            
            #if error_delta < 0.001:
            if np.abs(perr - max_error[idx]) < 0.1:
                
                min_angle1.append(angle1)
                min_angle2.append(angle2)
                error.append(float(perr))                
                break
                
            elif angle1 > 80 or angle2 > 80:
            #elif angle1 == angle2:
                
                min_angle1.append(np.nan)
                min_angle2.append(np.nan)
                error.append(np.nan)
                
                #min_angle1.append(angle1)    
                #error.append(float(perr))             
                break
                
            angle1 += 1
            angle2 += 1
            error_temp = perr
        
        idx +=1
    
    